import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // User onboarding and profile data
  users: defineTable({
    clerkUserId: v.string(),
    email: v.optional(v.string()),
    name: v.optional(v.string()),
    profileImage: v.optional(v.string()),
    onboardingCompleted: v.boolean(),
    onboardingStarted: v.optional(v.number()), // timestamp
    onboardingCompletedAt: v.optional(v.number()), // timestamp
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_clerk_user_id", ["clerkUserId"])
    .index("by_onboarding_status", ["onboardingCompleted"]),

  // Onboarding responses - stores all onboarding data
  onboardingResponses: defineTable({
    userId: v.id("users"),
    clerkUserId: v.string(),
    
    // Step 1 - Mood Snapshot
    onboardingMoodScore: v.optional(v.number()), // 1-4 based on emoji selection
    
    // Step 2 - Lifestyle & Stress Check (0-10 scale sliders)
    baselineLifestyle: v.optional(v.object({
      sleepQuality: v.number(),
      energyLevel: v.number(),
      stressLevel: v.number(),
      socialConnection: v.number(),
    })),
    
    // Step 3 - Mental Health Self-Report
    baselineAssessment: v.optional(v.object({
      anxietyFrequency: v.union(
        v.literal("never"),
        v.literal("several_days"),
        v.literal("more_than_half_days"),
        v.literal("nearly_every_day")
      ),
      interestLossFrequency: v.union(
        v.literal("never"),
        v.literal("several_days"),
        v.literal("more_than_half_days"),
        v.literal("nearly_every_day")
      ),
    })),
    
    // Step 4 - AI Reflection Response (generated by GPT)
    aiReflection: v.optional(v.object({
      personalizedGreeting: v.string(),
      strengthHighlight: v.string(),
      dailySuggestion: v.string(),
      fullResponse: v.string(),
    })),
    
    // Step 5 - Goals & Preferences
    focusAreas: v.optional(v.array(v.union(
      v.literal("reduce_stress"),
      v.literal("improve_sleep"),
      v.literal("boost_energy"),
      v.literal("build_healthy_habits")
    ))),
    
    // Completion tracking
    currentStep: v.number(), // 0-6 to track progress
    completedAt: v.optional(v.number()), // timestamp when onboarding completed
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user_id", ["userId"])
    .index("by_clerk_user_id", ["clerkUserId"])
    .index("by_completion_status", ["currentStep"]),

  // User diary entries (for future diary functionality)
  diaryEntries: defineTable({
    userId: v.id("users"),
    clerkUserId: v.string(),
    date: v.string(), // YYYY-MM-DD format
    moodScore: v.optional(v.number()),
    content: v.optional(v.string()),
    tags: v.optional(v.array(v.string())),
    isPrivate: v.boolean(),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user_id", ["userId"])
    .index("by_clerk_user_id", ["clerkUserId"])
    .index("by_date", ["date"])
    .index("by_user_and_date", ["userId", "date"]),

  // User streaks and achievements
  userStreaks: defineTable({
    userId: v.id("users"),
    clerkUserId: v.string(),
    currentStreak: v.number(),
    longestStreak: v.number(),
    lastEntryDate: v.optional(v.string()), // YYYY-MM-DD format
    achievements: v.optional(v.array(v.object({
      type: v.string(),
      unlockedAt: v.number(),
      title: v.string(),
      description: v.string(),
    }))),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user_id", ["userId"])
    .index("by_clerk_user_id", ["clerkUserId"]),
});
